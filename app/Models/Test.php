<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;
class Test extends Model
{
    protected $fillable = [
    	'time', 'name', 'instruction'
    ];

    public function questions() {
    	return $this->hasMany('App\Models\Question', 'test_id');
    }

    public function candidateAnswers(){
    	return $this->hasManyThrough('App\Models\QuestionChoice', 'App\Models\Question');
    }

    public function str_hash($str){
		$number = crc32($str);
		return abs($number % 7);
	}

	public function questionShuffled($test_id, $email) {
		$test1 = [
			0 => ["34", "38", "44", "37", "36", "2", "58", "33", "24", "35", "7", "6", "42", "12", "22", "8", "53", "57", "14", "49", "1", "3", "5", "54", "55", "23", "13", "20", "27", "11", "25", "41", "60", "45", "31", "59", "46", "28", "43", "56", "15", "47", "40", "39", "19", "4", "52", "21", "10", "48", "9", "51", "32", "17", "30", "16", "26", "18", "29", "50"],
			1 => ["15", "3", "5", "60", "37", "45", "19", "13", "18", "50", "33", "54", "35", "12", "47", "14", "44", "56", "30", "10", "49", "55", "53", "32", "26", "51", "8", "58", "11", "39", "6", "20", "36", "2", "28", "40", "38", "7", "22", "48", "1", "27", "34", "23", "46", "16", "57", "52", "59", "9", "29", "42", "31", "25", "43", "17", "41", "24", "21", "4"],
			2 => ["47", "36", "15", "56", "57", "5", "6", "23", "27", "46", "39", "31", "21", "28", "30", "52", "50", "16", "10", "41", "34", "54", "7", "4", "45", "60", "40", "24", "20", "17", "1", "9", "13", "18", "42", "14", "19", "58", "25", "8", "22", "12", "35", "26", "48", "44", "37", "32", "49", "29", "53", "43", "59", "33", "11", "3", "55", "51", "38", "2"],
			3 => ["60", "11", "1", "45", "40", "12", "26", "36", "31", "44", "37", "7", "4", "20", "30", "24", "48", "8", "23", "16", "19", "53", "54", "55", "14", "27", "17", "22", "41", "13", "50", "59", "34", "2", "43", "29", "35", "25", "32", "9", "10", "38", "58", "49", "46", "3", "33", "28", "56", "57", "5", "6", "52", "15", "39", "21", "42", "51", "18", "47"],
			4 => ["42", "56", "11", "8", "47", "27", "60", "20", "4", "13", "21", "18", "30", "10", "2", "28", "31", "48", "29", "39", "49", "33", "45", "5", "16", "19", "50", "57", "1", "58", "15", "22", "43", "38", "6", "36", "40", "32", "17", "41", "53", "59", "26", "3", "46", "52", "51", "54", "55", "23", "37", "14", "7", "34", "25", "44", "12", "9", "24", "35"],
			5 => ["43", "57", "6", "41", "35", "46", "36", "23", "27", "45", "11", "40", "12", "47", "60", "30", "55", "37", "58", "19", "56", "18", "25", "44", "22", "42", "9", "34", "59", "31", "50", "21", "39", "28", "1", "24", "14", "8", "3", "7", "17", "10", "52", "48", "54", "15", "29", "33", "38", "2", "4", "49", "5", "51", "32", "13", "20", "26", "16", "53"],
			6 => ["40", "7", "13", "22", "46", "59", "27", "16", "24", "10", "15", "35", "9", "4", "58", "11", "34", "45", "53", "26", "20", "52", "19", "51", "14", "41", "56", "30", "42", "48", "33", "55", "50", "23", "6", "28", "29", "12", "8", "54", "47", "3", "60", "39", "5", "2", "49", "44", "37", "36", "17", "21", "43", "32", "1", "31", "38", "57", "18", "25"]
		];
		$test2 = [
			0 => [69,70,71,72,141,142,143,144,125,126,127,128,117,118,119,120,145,146,147,148,137,138,139,140,89,90,91,92,85,86,87,88,65,66,67,68,97,98,99,100,113,114,115,116,133,134,135,136,105,106,107,108,149,150,151,152,121,122,123,124,101,102,103,104,77,78,79,80,61,62,63,64,73,74,75,76,153,154,155,156,81,82,83,84,129,130,131,132,109,110,111,112,93,94,95,96],
			1 => [105,106,107,108,81,82,83,84,137,138,139,140,149,150,151,152,85,86,87,88,77,78,79,80,121,122,123,124,97,98,99,100,141,142,143,144,133,134,135,136,117,118,119,120,73,74,75,76,61,62,63,64,109,110,111,112,113,114,115,116,89,90,91,92,125,126,127,128,129,130,131,132,153,154,155,156,69,70,71,72,65,66,67,68,101,102,103,104,145,146,147,148,93,94,95,96],
			2 => [129,130,131,132,73,74,75,76,105,106,107,108,117,118,119,120,81,82,83,84,153,154,155,156,69,70,71,72,137,138,139,140,109,110,111,112,97,98,99,100,89,90,91,92,113,114,115,116,101,102,103,104,77,78,79,80,149,150,151,152,121,122,123,124,85,86,87,88,125,126,127,128,133,134,135,136,65,66,67,68,141,142,143,144,61,62,63,64,93,94,95,96,145,146,147,148],
			3 => [85,86,87,88,101,102,103,104,117,118,119,120,65,66,67,68,73,74,75,76,145,146,147,148,89,90,91,92,81,82,83,84,113,114,115,116,77,78,79,80,137,138,139,140,121,122,123,124,141,142,143,144,149,150,151,152,69,70,71,72,97,98,99,100,133,134,135,136,109,110,111,112,93,94,95,96,125,126,127,128,129,130,131,132,153,154,155,156,61,62,63,64,105,106,107,108],
			4 => [101,102,103,104,133,134,135,136,141,142,143,144,85,86,87,88,69,70,71,72,153,154,155,156,105,106,107,108,81,82,83,84,77,78,79,80,73,74,75,76,113,114,115,116,61,62,63,64,137,138,139,140,117,118,119,120,97,98,99,100,145,146,147,148,65,66,67,68,125,126,127,128,129,130,131,132,121,122,123,124,109,110,111,112,89,90,91,92,93,94,95,96,149,150,151,152],
			5 => [105,106,107,108,141,142,143,144,149,150,151,152,137,138,139,140,121,122,123,124,69,70,71,72,85,86,87,88,61,62,63,64,125,126,127,128,65,66,67,68,113,114,115,116,73,74,75,76,97,98,99,100,153,154,155,156,117,118,119,120,129,130,131,132,109,110,111,112,145,146,147,148,81,82,83,84,133,134,135,136,93,94,95,96,77,78,79,80,89,90,91,92,101,102,103,104],
			6 => [149,150,151,152,65,66,67,68,81,82,83,84,89,90,91,92,117,118,119,120,125,126,127,128,121,122,123,124,97,98,99,100,141,142,143,144,69,70,71,72,133,134,135,136,93,94,95,96,113,114,115,116,137,138,139,140,153,154,155,156,73,74,75,76,145,146,147,148,105,106,107,108,129,130,131,132,85,86,87,88,61,62,63,64,109,110,111,112,77,78,79,80,101,102,103,104]
		];
		$test3 = [
			0 => ["220", "227", "200", "210", "198", "223", "186", "169", "236", "245", "226", "212", "163", "167", "168", "172", "170", "164", "158", "215", "196", "175", "199", "213", "173", "221", "188", "241", "166", "197", "174", "191", "177", "206", "238", "202", "162", "239", "235", "192", "211", "209", "208", "183", "207", "171", "219", "180", "224", "195", "190", "230", "217", "246", "160", "232", "201", "234", "184", "233", "182", "193", "194", "228", "222", "187", "244", "229", "185", "179", "176", "204", "242", "231", "161", "178", "189", "214", "243", "157", "240", "218", "237", "165", "203", "205", "181", "225", "159", "216"],
			1 => ["160", "244", "241", "204", "224", "170", "227", "208", "243", "193", "157", "196", "192", "172", "228", "164", "211", "242", "214", "158", "219", "195", "206", "237", "246", "216", "181", "191", "166", "226", "212", "180", "194", "187", "173", "199", "167", "165", "220", "163", "197", "171", "189", "230", "186", "175", "215", "174", "178", "210", "221", "245", "205", "201", "235", "183", "162", "179", "177", "185", "169", "168", "229", "232", "159", "203", "184", "223", "239", "202", "225", "222", "213", "231", "190", "217", "188", "182", "200", "207", "233", "161", "236", "198", "218", "240", "238", "234", "209", "176"],
			2 => ["214", "168", "224", "162", "209", "244", "222", "181", "234", "163", "179", "239", "182", "200", "174", "169", "245", "223", "235", "242", "246", "172", "206", "157", "233", "164", "208", "192", "236", "175", "189", "183", "188", "204", "240", "238", "217", "178", "177", "230", "220", "212", "226", "241", "171", "203", "228", "205", "180", "198", "165", "193", "237", "202", "161", "201", "176", "186", "215", "170", "166", "173", "167", "231", "211", "219", "225", "213", "197", "218", "184", "199", "207", "185", "190", "229", "216", "227", "158", "243", "195", "196", "187", "159", "160", "191", "221", "194", "210", "232"],
			3 => ["218", "169", "189", "244", "235", "216", "223", "176", "165", "224", "181", "194", "193", "199", "187", "183", "173", "229", "203", "206", "198", "211", "196", "208", "242", "201", "191", "186", "170", "227", "213", "166", "210", "245", "237", "161", "226", "164", "182", "238", "185", "221", "222", "240", "220", "160", "172", "204", "202", "209", "174", "190", "239", "232", "212", "192", "157", "228", "175", "225", "184", "200", "158", "241", "171", "159", "219", "162", "180", "214", "246", "217", "179", "195", "231", "205", "188", "230", "168", "236", "177", "167", "243", "234", "197", "178", "233", "163", "215", "207"],
			4 => ["192", "167", "239", "236", "240", "219", "207", "163", "184", "168", "179", "213", "238", "187", "183", "228", "164", "189", "172", "181", "246", "198", "188", "217", "231", "226", "223", "162", "171", "221", "193", "169", "244", "211", "209", "158", "178", "194", "161", "191", "205", "215", "199", "206", "203", "230", "190", "204", "160", "234", "225", "182", "174", "237", "210", "212", "177", "157", "159", "216", "170", "195", "241", "200", "202", "201", "180", "227", "173", "220", "165", "166", "176", "229", "214", "197", "175", "235", "233", "224", "245", "185", "196", "243", "242", "232", "208", "218", "186", "222"],
			5 => ["190", "230", "207", "188", "180", "223", "172", "222", "226", "202", "237", "241", "173", "235", "225", "218", "164", "179", "227", "186", "205", "236", "194", "244", "238", "231", "239", "192", "200", "163", "219", "246", "158", "224", "243", "183", "232", "174", "211", "168", "220", "175", "245", "201", "242", "214", "233", "213", "240", "167", "193", "206", "165", "210", "160", "170", "198", "208", "176", "212", "199", "229", "209", "196", "228", "203", "216", "157", "159", "182", "195", "169", "189", "234", "221", "185", "171", "166", "178", "161", "197", "215", "181", "191", "162", "184", "187", "217", "204", "177"],
			6 => ["198", "201", "171", "223", "210", "208", "172", "173", "246", "218", "204", "216", "184", "212", "230", "187", "224", "202", "193", "243", "162", "234", "200", "206", "232", "166", "185", "235", "178", "203", "228", "239", "226", "194", "244", "163", "245", "159", "176", "192", "240", "229", "180", "225", "196", "231", "164", "177", "238", "158", "189", "181", "179", "169", "211", "161", "175", "157", "190", "160", "227", "237", "174", "165", "167", "207", "209", "215", "217", "199", "188", "242", "197", "191", "182", "241", "183", "219", "186", "195", "236", "170", "205", "233", "168", "222", "221", "220", "214", "213"]
		];

		if ($test_id == 1) {
			return $this->hasMany('App\Models\Question', 'test_id')->orderBy(DB::raw("FIELD(id,".join(',',$test1[$this->str_hash($email)]).")"))->get();
		} else if ($test_id == 2) {
			return $this->hasMany('App\Models\Question', 'test_id')->orderBy(DB::raw("FIELD(id,".join(',',$test2[$this->str_hash($email)]).")"))->get();
		} else{
			return $this->hasMany('App\Models\Question', 'test_id')->orderBy(DB::raw("FIELD(id,".join(',',$test2[$this->str_hash($email)]).")"))->get();
		}

	}
}
